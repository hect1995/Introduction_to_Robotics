// Generated by gencpp from file ras_lab1_msgs/BatteryStatus.msg
// DO NOT EDIT!


#ifndef RAS_LAB1_MSGS_MESSAGE_BATTERYSTATUS_H
#define RAS_LAB1_MSGS_MESSAGE_BATTERYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ras_lab1_msgs
{
template <class ContainerAllocator>
struct BatteryStatus_
{
  typedef BatteryStatus_<ContainerAllocator> Type;

  BatteryStatus_()
    : on_batt(0)
    , cell1(0.0)
    , cell2(0.0)
    , cell3(0.0)  {
    }
  BatteryStatus_(const ContainerAllocator& _alloc)
    : on_batt(0)
    , cell1(0.0)
    , cell2(0.0)
    , cell3(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _on_batt_type;
  _on_batt_type on_batt;

   typedef float _cell1_type;
  _cell1_type cell1;

   typedef float _cell2_type;
  _cell2_type cell2;

   typedef float _cell3_type;
  _cell3_type cell3;




  typedef boost::shared_ptr< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryStatus_

typedef ::ras_lab1_msgs::BatteryStatus_<std::allocator<void> > BatteryStatus;

typedef boost::shared_ptr< ::ras_lab1_msgs::BatteryStatus > BatteryStatusPtr;
typedef boost::shared_ptr< ::ras_lab1_msgs::BatteryStatus const> BatteryStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ras_lab1_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ras_lab1_msgs': ['/home/wasp/catkin_ws/src/ras_lab1/ras_lab1_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cacd621f2d12e6814d77d4a2f6b6051";
  }

  static const char* value(const ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cacd621f2d12e68ULL;
  static const uint64_t static_value2 = 0x14d77d4a2f6b6051ULL;
};

template<class ContainerAllocator>
struct DataType< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ras_lab1_msgs/BatteryStatus";
  }

  static const char* value(const ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Say if battery is in use, of if a wall adaptator is present\n\
# value : 1 if on battery, 0 if adaptator present\n\
uint8 on_batt\n\
\n\
# cell voltage\n\
float32 cell1\n\
float32 cell2\n\
float32 cell3\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.on_batt);
      stream.next(m.cell1);
      stream.next(m.cell2);
      stream.next(m.cell3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ras_lab1_msgs::BatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "on_batt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on_batt);
    s << indent << "cell1: ";
    Printer<float>::stream(s, indent + "  ", v.cell1);
    s << indent << "cell2: ";
    Printer<float>::stream(s, indent + "  ", v.cell2);
    s << indent << "cell3: ";
    Printer<float>::stream(s, indent + "  ", v.cell3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAS_LAB1_MSGS_MESSAGE_BATTERYSTATUS_H
