// Generated by gencpp from file ras_msgs/RAS_Evidence.msg
// DO NOT EDIT!


#ifndef RAS_MSGS_MESSAGE_RAS_EVIDENCE_H
#define RAS_MSGS_MESSAGE_RAS_EVIDENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <geometry_msgs/TransformStamped.h>

namespace ras_msgs
{
template <class ContainerAllocator>
struct RAS_Evidence_
{
  typedef RAS_Evidence_<ContainerAllocator> Type;

  RAS_Evidence_()
    : stamp()
    , group_number(0)
    , image_evidence()
    , object_id()
    , object_location()  {
    }
  RAS_Evidence_(const ContainerAllocator& _alloc)
    : stamp()
    , group_number(0)
    , image_evidence(_alloc)
    , object_id(_alloc)
    , object_location(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _group_number_type;
  _group_number_type group_number;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_evidence_type;
  _image_evidence_type image_evidence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_id_type;
  _object_id_type object_id;

   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _object_location_type;
  _object_location_type object_location;


    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  an_object;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  red_cube;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  red_hollow_cube;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  blue_cube;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  green_cube;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  yellow_cube;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  yellow_ball;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  red_ball;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  red_cylinder;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  green_cylinder;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  green_hollow_cube;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  blue_triangle;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  purple_cross;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  purple_star;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  orange_cross;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  patric;
 

  typedef boost::shared_ptr< ::ras_msgs::RAS_Evidence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ras_msgs::RAS_Evidence_<ContainerAllocator> const> ConstPtr;

}; // struct RAS_Evidence_

typedef ::ras_msgs::RAS_Evidence_<std::allocator<void> > RAS_Evidence;

typedef boost::shared_ptr< ::ras_msgs::RAS_Evidence > RAS_EvidencePtr;
typedef boost::shared_ptr< ::ras_msgs::RAS_Evidence const> RAS_EvidenceConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::an_object =
        
          "An Object"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::red_cube =
        
          "Red Cube"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::red_hollow_cube =
        
          "Red Hollow Cube"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::blue_cube =
        
          "Blue Cube"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::green_cube =
        
          "Green Cube"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::yellow_cube =
        
          "Yellow Cube"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::yellow_ball =
        
          "Yellow Ball"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::red_ball =
        
          "Red Ball"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::red_cylinder =
        
          "Red Cylinder"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::green_cylinder =
        
          "Green Cylinder"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::green_hollow_cube =
        
          "Green Hollow Cube"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::blue_triangle =
        
          "Blue Triangle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::purple_cross =
        
          "Purple Cross"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::purple_star =
        
          "Purple Star"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::orange_cross =
        
          "Orange Cross"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RAS_Evidence_<ContainerAllocator>::patric =
        
          "Patric"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ras_msgs::RAS_Evidence_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ras_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ras_msgs': ['/home/wasp/catkin_ws/src/ras_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ras_msgs::RAS_Evidence_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ras_msgs::RAS_Evidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ras_msgs::RAS_Evidence_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71fcfca56843bccb15bf61ddab2df9eb";
  }

  static const char* value(const ::ras_msgs::RAS_Evidence_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71fcfca56843bccbULL;
  static const uint64_t static_value2 = 0x15bf61ddab2df9ebULL;
};

template<class ContainerAllocator>
struct DataType< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ras_msgs/RAS_Evidence";
  }

  static const char* value(const ::ras_msgs::RAS_Evidence_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#### Timestamp of the msg ####\n\
time stamp\n\
\n\
#### Group number####\n\
uint8 group_number\n\
\n\
#### RGB Image frame which shows detected/identified object ####\n\
sensor_msgs/Image image_evidence\n\
\n\
#### String that indicates which object has been detected/recognized ####\n\
string object_id\n\
\n\
# object_id should be one of the following (use these constants)\n\
# an_object: object was detected but not identified\n\
# red_hollow_cube: red cube with hole on top\n\
string an_object=An Object\n\
string red_cube=Red Cube\n\
string red_hollow_cube=Red Hollow Cube\n\
string blue_cube=Blue Cube\n\
string green_cube=Green Cube\n\
string yellow_cube=Yellow Cube\n\
string yellow_ball=Yellow Ball\n\
string red_ball=Red Ball\n\
string red_cylinder=Red Cylinder\n\
string green_cylinder=Green Cylinder\n\
string green_hollow_cube=Green Hollow Cube\n\
string blue_triangle=Blue Triangle\n\
string purple_cross=Purple Cross\n\
string purple_star=Purple Star\n\
string orange_cross=Orange Cross\n\
string patric=Patric\n\
\n\
#### Location of the object in the /map frame ####\n\
# MAKE SURE THE LOCATION IS EXPRESSED IN THE /map FRAME!\n\
# we only care about X,Y position coordinate\n\
geometry_msgs/TransformStamped object_location\n\
\n\
# More info: https://anywiki.csc.kth.se/DD2425/doku.php?id=ras2017:object_evidence\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TransformStamped\n\
# This expresses a transform from coordinate frame header.frame_id\n\
# to the coordinate frame child_frame_id\n\
#\n\
# This message is mostly used by the \n\
# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n\
# See its documentation for more information.\n\
\n\
Header header\n\
string child_frame_id # the frame id of the child frame\n\
Transform transform\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ras_msgs::RAS_Evidence_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.group_number);
      stream.next(m.image_evidence);
      stream.next(m.object_id);
      stream.next(m.object_location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RAS_Evidence_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ras_msgs::RAS_Evidence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ras_msgs::RAS_Evidence_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "group_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.group_number);
    s << indent << "image_evidence: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image_evidence);
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_id);
    s << indent << "object_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.object_location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAS_MSGS_MESSAGE_RAS_EVIDENCE_H
