# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ras_msgs/RAS_Evidence.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import genpy
import sensor_msgs.msg

class RAS_Evidence(genpy.Message):
  _md5sum = "71fcfca56843bccb15bf61ddab2df9eb"
  _type = "ras_msgs/RAS_Evidence"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#### Timestamp of the msg ####
time stamp

#### Group number####
uint8 group_number

#### RGB Image frame which shows detected/identified object ####
sensor_msgs/Image image_evidence

#### String that indicates which object has been detected/recognized ####
string object_id

# object_id should be one of the following (use these constants)
# an_object: object was detected but not identified
# red_hollow_cube: red cube with hole on top
string an_object=An Object
string red_cube=Red Cube
string red_hollow_cube=Red Hollow Cube
string blue_cube=Blue Cube
string green_cube=Green Cube
string yellow_cube=Yellow Cube
string yellow_ball=Yellow Ball
string red_ball=Red Ball
string red_cylinder=Red Cylinder
string green_cylinder=Green Cylinder
string green_hollow_cube=Green Hollow Cube
string blue_triangle=Blue Triangle
string purple_cross=Purple Cross
string purple_star=Purple Star
string orange_cross=Orange Cross
string patric=Patric

#### Location of the object in the /map frame ####
# MAKE SURE THE LOCATION IS EXPRESSED IN THE /map FRAME!
# we only care about X,Y position coordinate
geometry_msgs/TransformStamped object_location

# More info: https://anywiki.csc.kth.se/DD2425/doku.php?id=ras2017:object_evidence

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  an_object = 'An Object'
  red_cube = 'Red Cube'
  red_hollow_cube = 'Red Hollow Cube'
  blue_cube = 'Blue Cube'
  green_cube = 'Green Cube'
  yellow_cube = 'Yellow Cube'
  yellow_ball = 'Yellow Ball'
  red_ball = 'Red Ball'
  red_cylinder = 'Red Cylinder'
  green_cylinder = 'Green Cylinder'
  green_hollow_cube = 'Green Hollow Cube'
  blue_triangle = 'Blue Triangle'
  purple_cross = 'Purple Cross'
  purple_star = 'Purple Star'
  orange_cross = 'Orange Cross'
  patric = 'Patric'

  __slots__ = ['stamp','group_number','image_evidence','object_id','object_location']
  _slot_types = ['time','uint8','sensor_msgs/Image','string','geometry_msgs/TransformStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,group_number,image_evidence,object_id,object_location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RAS_Evidence, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.group_number is None:
        self.group_number = 0
      if self.image_evidence is None:
        self.image_evidence = sensor_msgs.msg.Image()
      if self.object_id is None:
        self.object_id = ''
      if self.object_location is None:
        self.object_location = geometry_msgs.msg.TransformStamped()
    else:
      self.stamp = genpy.Time()
      self.group_number = 0
      self.image_evidence = sensor_msgs.msg.Image()
      self.object_id = ''
      self.object_location = geometry_msgs.msg.TransformStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IB3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs))
      _x = self.image_evidence.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image_evidence.height, _x.image_evidence.width))
      _x = self.image_evidence.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image_evidence.is_bigendian, _x.image_evidence.step))
      _x = self.image_evidence.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.object_location.header.seq, _x.object_location.header.stamp.secs, _x.object_location.header.stamp.nsecs))
      _x = self.object_location.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_location.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.object_location.transform.translation.x, _x.object_location.transform.translation.y, _x.object_location.transform.translation.z, _x.object_location.transform.rotation.x, _x.object_location.transform.rotation.y, _x.object_location.transform.rotation.z, _x.object_location.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.image_evidence is None:
        self.image_evidence = sensor_msgs.msg.Image()
      if self.object_location is None:
        self.object_location = geometry_msgs.msg.TransformStamped()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs,) = _get_struct_2IB3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_evidence.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_evidence.height, _x.image_evidence.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.encoding = str[start:end].decode('utf-8')
      else:
        self.image_evidence.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_evidence.is_bigendian, _x.image_evidence.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_evidence.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_id = str[start:end].decode('utf-8')
      else:
        self.object_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.object_location.header.seq, _x.object_location.header.stamp.secs, _x.object_location.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_location.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.object_location.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_location.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.object_location.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.object_location.transform.translation.x, _x.object_location.transform.translation.y, _x.object_location.transform.translation.z, _x.object_location.transform.rotation.x, _x.object_location.transform.rotation.y, _x.object_location.transform.rotation.z, _x.object_location.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IB3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs))
      _x = self.image_evidence.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image_evidence.height, _x.image_evidence.width))
      _x = self.image_evidence.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image_evidence.is_bigendian, _x.image_evidence.step))
      _x = self.image_evidence.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.object_location.header.seq, _x.object_location.header.stamp.secs, _x.object_location.header.stamp.nsecs))
      _x = self.object_location.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_location.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.object_location.transform.translation.x, _x.object_location.transform.translation.y, _x.object_location.transform.translation.z, _x.object_location.transform.rotation.x, _x.object_location.transform.rotation.y, _x.object_location.transform.rotation.z, _x.object_location.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.image_evidence is None:
        self.image_evidence = sensor_msgs.msg.Image()
      if self.object_location is None:
        self.object_location = geometry_msgs.msg.TransformStamped()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs,) = _get_struct_2IB3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_evidence.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_evidence.height, _x.image_evidence.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.encoding = str[start:end].decode('utf-8')
      else:
        self.image_evidence.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_evidence.is_bigendian, _x.image_evidence.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_evidence.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_id = str[start:end].decode('utf-8')
      else:
        self.object_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.object_location.header.seq, _x.object_location.header.stamp.secs, _x.object_location.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_location.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.object_location.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_location.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.object_location.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.object_location.transform.translation.x, _x.object_location.transform.translation.y, _x.object_location.transform.translation.z, _x.object_location.transform.rotation.x, _x.object_location.transform.rotation.y, _x.object_location.transform.rotation.z, _x.object_location.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2IB3I = None
def _get_struct_2IB3I():
    global _struct_2IB3I
    if _struct_2IB3I is None:
        _struct_2IB3I = struct.Struct("<2IB3I")
    return _struct_2IB3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
